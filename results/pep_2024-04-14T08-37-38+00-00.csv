number,name,status
1,PEP Purpose and Guidelines,
569,Python 3.8 Release Schedule,
452,API for Cryptographic Hash Functions v2.0,
430,Migrating to Python 3 as the default online documentation,
482,Literature Overview for Type Hints,
457,Notation For Positional-Only Parameters,
514,Python registration in the Windows registry,
483,The Theory of Type Hints,
434,IDLE Enhancement Exception for All Branches,
399,Pure Python/C Accelerator Module Compatibility Requirements,
394,The “python” Command on Unix-Like Systems,
333,Python Web Server Gateway Interface v1.0,
291,Backward Compatibility for the Python 2 Standard Library,
290,Code Migration and Modernization,
272,API for Block Encryption Algorithms v1.0,
287,reStructuredText Docstring Format,
8015,Organization of the Python community,
8014,The Commons Governance Model,
8012,The Community Governance Model,
8013,The External Council Governance Model,
8011,Python Governance Model Lead by Trio of Pythonistas,
8010,The Technical Leader Governance Model,
3152,Cofunctions,
3153,Asynchronous IO support,
3145,Asynchronous I/O For subprocess.Popen,
3140,"str(container) should call str(item), not repr(item)",
3142,Add a “while” clause to generator expressions,
3139,Cleaning out sys and the “interpreter” module,
3136,Labeled break and continue,
3133,Introducing Roles,
3130,Access to Current Module/Class/Function,
3128,BList: A Faster List-like Type,
3146,Merging Unladen Swallow into CPython,
3125,Remove Backslash Continuation,
3126,Remove Implicit String Concatenation,
3122,Delineation of the main module,
3117,Postfix type declarations,
3103,A Switch/Case Statement,
3001,Procedure for reviewing and improving standard library modules,
754,IEEE 754 Floating Point Special Values,
722,Dependency specification for single-file scripts,
724,Stricter Type Guards,
713,Callable Modules,
707,A simplified signature for __exit__ and __aexit__,
704,Require virtual environments by default for package installers,
726,Module ,
690,Lazy Imports,
677,Callable Type Syntax,
663,"Standardizing Enum str(), repr(), and format() behaviors",
665,A file format to list Python dependencies for reproducibility of an application,
666,Reject Foolish Indentation,
662,Editable installs via virtual wheels,
651,Robust Stack Overflow Handling,
648,Extensible customizations of the interpreter at startup,
645,Allow writing optional types as ,
650,Specifying Installer Requirements for Python Projects,
640,Unused variable syntax,
641,Using an underscore in the version portion of Python 3.10 compatibility tags,
642,Explicit Pattern Syntax for Structural Pattern Matching,
637,Support for indexing with keyword arguments,
633,Dependency specification in pyproject.toml using an exploded TOML table,
631,Dependency specification in pyproject.toml based on PEP 508,
622,Structural Pattern Matching,
608,Coordinated Python release,
606,Python Compatibility Version,
611,The one million limit,
605,A rolling feature release stream for CPython,
601,Forbid return/break/continue breaking out of finally,
599,The manylinux2014 Platform Tag,
620,Hide implementation details from the C API,
598,Introducing incremental feature releases,
595,Improving bugs.python.org,
583,A Concurrency Memory Model for Python,
582,Python local packages directory,
580,The C call protocol,
577,Augmented Assignment Expressions,
576,Rationalize Built-in function classes,
571,The manylinux2010 Platform Tag,
559,Built-in noop(),
555,Context-local variables (contextvars),
554,Multiple Interpreters in the Stdlib,
551,Security transparency in the Python runtime,
550,Execution Context,
549,Instance Descriptors,
548,More Flexible Loop Control,
546,Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7,
575,Unifying function/method classes,
543,A Unified TLS API for Python,
542,Dot Notation Assignment In Function Header,
536,Final Grammar for Literal String Interpolation,
531,Existence checking operators,
522,Allow BlockingIOError in security sensitive APIs,
521,Managing global context via ‘with’ blocks in generators and coroutines,
516,Build system abstraction for pip/conda etc,
510,Specialize functions with guards,
509,Add a private version to dict,
511,API for code transformers,
502,String Interpolation - Extended Discussion,
507,Migrate CPython to Git and GitLab,
504,Using the System RNG by default,
513,A Platform Tag for Portable Linux Built Distributions,
500,A protocol for delegating datetime methods to their tzinfo implementations,
497,A standard mechanism for backward compatibility,
490,Chain exceptions at C level,
496,Environment Markers,
481,"Migrate CPython to Git, Github, and Phabricator",
474,Creating forge.python.org,
473,Adding structured data to built-in exceptions,
469,Migration of dict iteration code to Python 3,
463,Exception-catching expressions,
460,Add binary interpolation and formatting,
462,Core development workflow automation for CPython,
459,Standard Metadata Extensions for Python Software Packages,
472,Support for indexing with keyword arguments,
455,Adding a key-transforming dictionary to collections,
439,Inclusion of implicit pip bootstrap in Python installation,
437,"A DSL for specifying signatures, annotations and argument converters",
433,Easier suppression of file descriptor inheritance,
431,Time zone support improvements,
432,Restructuring the CPython startup sequence,
426,Metadata for Python Software Packages 2.0,
411,Provisional packages in the Python standard library,
416,Add a frozendict builtin type,
413,Faster evolution of the Python Standard Library,
410,Use decimal.Decimal type for timestamps,
408,Standard library __preview__ package,
406,Improved Encapsulation of Import State,
402,Simplified Package Layout and Partitioning,
422,Simpler customisation of class creation,
396,Module Version Numbers,
401,BDFL Retirement,
395,Qualified Names for Modules,
390,Static metadata for Distutils,
386,Changing the version comparison module in Distutils,
382,Namespace Packages,
381,Mirroring infrastructure for PyPI,
369,Post import hooks,
377,Allow __enter__() methods to skip the statement body,
379,Adding an Assignment Expression,
367,New Super,
365,Adding the pkg_resources module,
363,Syntax For Dynamic Attribute Access,
364,Transitioning to the Py3K Standard Library,
359,The “make” Statement,
355,Path - Object oriented filesystem paths,
354,Enumerations in Python,
349,Allow str() to return unicode strings,
350,Codetags,
351,The freeze protocol,
346,User Defined (”,
348,Exception Reorganization for Python 3.0,
345,Metadata for Python Software Packages 1.2,
344,Exception Chaining and Embedded Tracebacks,
340,Anonymous Block Statements,
339,Design of the CPython Compiler,
336,Make None Callable,
334,Simple Coroutines via SuspendIteration,
330,Python Bytecode Verification,
332,Byte vectors and String/Unicode Unification,
329,Treating Builtins as Constants in the Standard Library,
326,A Case for Top and Bottom Values,
325,Resource-Release Support for Generators,
335,Overloadable Boolean Operators,
321,Date/Time Parsing and Formatting,
319,Python Synchronize/Asynchronize Block,
317,Eliminate Implicit Exception Instantiation,
315,Enhanced While Loop,
314,Metadata for Python Software Packages 1.1,
313,Adding Roman Numeral Literals to Python,
310,Reliable Acquisition/Release Pairs,
299,Special __main__() function in modules,
298,The Locked Buffer Interface,
304,Controlling Generation of Bytecode Files,
303,Extend divmod() for Multiple Divisors,
297,Support for System Upgrades,
306,How to Change Python’s Grammar,
296,Adding a bytes Object Type,
295,Interpretation of multiline string constants,
294,Type Names in the types Module,
288,Generators Attributes and Exceptions,
281,Loop Counter Iteration with range and xrange,
276,Simple Iterator for ints,
284,Integer for-loops,
270,uniq method for list objects,
271,Prefixing sys.path by command line option,
268,Extended HTTP functionality and WebDAV,
275,Switching on Multiple Values,
265,Sorting Dictionaries by Value,
266,Optimizing Global Variable/Attribute Access,
262,A Database of Installed Python Packages,
259,Omit printing newline after newline,
258,Docutils Design Specification,
254,Making Classes Look More Like Types,
256,Docstring Processing System Framework,
245,Python Interface Syntax,
244,The ,
243,Module Repository Upload Mechanism,
242,Numeric Kinds,
241,Metadata for Python Software Packages,
240,Adding a Rational Literal to Python,
239,Adding a Rational Type to Python,
231,__findattr__(),
228,Reworking Python’s Numeric Model,
225,Elementwise/Objectwise Operators,
224,Attribute Docstrings,
220,"Coroutines, Generators, Continuations",
216,Docstring Format,
215,String Interpolation,
212,Loop Counter Iteration,
211,Adding A New Outer Product Operator,
210,Decoupling the Interpreter Loop,
206,Python Advanced Library,
204,Range Literals,
209,Multi-dimensional Arrays,
246,Object Adaptation,
103,Collecting information about git,
102,Doing Python Micro Releases,
42,Feature Requests,
9,Sample Plaintext PEP Template,
3150,Statement local namespaces (aka “given” clause),
3,Guidelines for Handling Bug Reports,
3143,Standard daemon process library,
734,Multiple Interpreters in the Stdlib,
674,Disallow using macros as l-values,
558,Defined semantics for locals(),
568,Generator-sensitivity for Context Variables,
556,Threaded garbage collection,
547,Running extension modules using the -m option,
535,Rich comparison chaining,
534,Improved Errors for Missing Standard Library Modules,
533,Deterministic cleanup for iterators,
532,A circuit breaking protocol and binary operators,
501,General purpose string interpolation,
499,,
505,None-aware operators,
3124,"Overloading, Generic Functions, Interfaces, and Adaptation",
491,The Wheel Binary Package Format 1.9,
423,Naming conventions and recipes related to packaging,
444,Python Web3 Interface,
419,Protecting cleanup statements from interruptions,
407,New release cycle and introducing long-term support versions,
403,General purpose decorator clause (aka “@in” clause),
368,Standard image protocol and class,
447,Add __getdescriptor__ method to metaclass,
323,Copyable Iterators,
337,Logging Usage in the Standard Library,
316,Programming by Contract for Python,
286,Enhanced Argument Tuples,
312,Simple Implicit Lambda,
280,Optimizing access to globals,
400,Deprecate codecs.StreamReader and codecs.StreamWriter,
269,Pgen Module for Python,
233,Python Online Help,
267,Optimized Access to Module Namespaces,
213,Attribute Access Handlers,
219,Stackless Python,
222,Web Library Enhancements,
8001,Python Governance Voting Process,
3000,Python 3000,
3003,Python Language Moratorium,
3099,Things that will Not Change in Python 3000,
3002,Procedure for Backwards-Incompatible Changes,
541,Package Index Name Retention,
545,Python Documentation Translations,
537,Python 3.7 Release Schedule,
3100,Miscellaneous Python 3.0 Plans,
512,Migrating from hg.python.org to GitHub,
494,Python 3.6 Release Schedule,
478,Python 3.5 Release Schedule,
464,Removal of the PyPI Mirror Authenticity API,
470,Removing External Hosting Support on PyPI,
449,Removal of the PyPI Mirror Auto Discovery and Naming Scheme,
438,Transitioning to release-file hosting on PyPI,
385,Migrating from Subversion to Mercurial,
398,Python 3.3 Release Schedule,
404,Python 2.8 Un-release Schedule,
392,Python 3.2 Release Schedule,
375,Python 3.1 Release Schedule,
374,Choosing a distributed VCS for the Python project,
429,Python 3.4 Release Schedule,
373,Python 2.7 Release Schedule,
361,Python 2.6 and 3.0 Release Schedule,
360,Externally Maintained Packages,
356,Python 2.5 Release Schedule,
347,Migrating the Python CVS to Subversion,
320,Python 2.4 Release Schedule,
283,Python 2.3 Release Schedule,
226,Python 2.1 Release Schedule,
160,Python 1.6 Release Schedule,
6,Bug Fix Releases,
200,Python 2.0 Release Schedule,
251,Python 2.2 Release Schedule,
5,Guidelines for Language Evolution,
3156,Asynchronous IO Support Rebooted: the “asyncio” Module,
3155,Qualified name for classes and functions,
3154,Pickle protocol version 4,
3149,ABI version tagged .so files,
3148,futures - execute computations asynchronously,
3151,Reworking the OS and IO exception hierarchy,
3144,IP Address Manipulation Library for the Python Standard Library,
3141,A Type Hierarchy for Numbers,
3138,String representation in Python 3000,
3137,Immutable Bytes and Mutable Buffer,
3135,New Super,
3132,Extended Iterable Unpacking,
3134,Exception Chaining and Embedded Tracebacks,
3129,Class Decorators,
3131,Supporting Non-ASCII Identifiers,
3127,Integer Literal Support and Syntax,
3123,Making PyObject_HEAD conform to standard C,
3121,Extension Module Initialization and Finalization,
3120,Using UTF-8 as the default source encoding,
3119,Introducing Abstract Base Classes,
3147,PYC Repository Directories,
3118,Revising the buffer protocol,
3116,New I/O,
3115,Metaclasses in Python 3000,
3113,Removal of Tuple Parameter Unpacking,
3114,Renaming iterator.next() to iterator.__next__(),
3111,Simple input built-in in Python 3000,
3112,Bytes literals in Python 3000,
3109,Raising Exceptions in Python 3000,
3108,Standard Library Reorganization,
3107,Function Annotations,
3106,"Revamping dict.keys(), .values() and .items()",
3105,Make print a function,
3102,Keyword-Only Arguments,
3104,Access to Names in Outer Scopes,
3110,Catching Exceptions in Python 3000,
3101,Advanced String Formatting,
737,C API to format a type fully qualified name,
715,Disabling bdist_egg distribution uploads on PyPI,
721,Using tarfile.data_filter for source distribution extraction,
700,Additional Fields for the Simple API for Package Indexes,
709,Inlined comprehensions,
706,Filter for tarfile.extractall,
697,Limited C API for Extending Opaque Types,
692,Using TypedDict for more precise **kwargs typing,
695,Type Parameter Syntax,
689,Unstable C API tier,
688,Making the buffer protocol accessible in Python,
681,Data Class Transforms,
682,Format Specifier for Signed Zero,
680,tomllib: Support for Parsing TOML in the Standard Library,
678,Enriching Exceptions with Notes,
670,Convert macros to functions in the Python C API,
673,Self Type,
675,Arbitrary Literal String Type,
669,Low Impact Monitoring for CPython,
660,Editable installs for pyproject.toml based builds (wheel based),
698,Override Decorator for Static Typing,
656,Platform Tag for Linux Distributions Using Musl,
657,Include Fine Grained Error Locations in Tracebacks,
655,Marking individual TypedDict items as required or potentially-missing,
654,Exception Groups and except*,
652,Maintaining the Stable ABI,
647,User-Defined Type Guards,
644,Require OpenSSL 1.1.1 or newer,
634,Structural Pattern Matching: Specification,
632,Deprecate distutils module,
628,Add ,
629,Versioning PyPI’s Simple API,
626,Precise line numbers for debugging and other tools.,
627,Recording installed projects,
624,Remove Py_UNICODE encoder APIs,
623,Remove wstr from Unicode,
643,Metadata for Package Source Distributions,
621,Storing project metadata in pyproject.toml,
617,New PEG parser for CPython,
618,Add Optional Length-Checking To zip,
616,String methods to remove prefixes and suffixes,
614,Relaxing Grammar Restrictions On Decorators,
613,Explicit Type Aliases,
604,Allow writing union types as ,
612,Parameter Specification Variables,
600,Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions,
597,Add optional EncodingWarning,
594,Removing dead batteries from the standard library,
593,Flexible function and variable annotations,
592,Adding “Yank” Support to the Simple API,
589,TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys,
610,Recording the Direct URL Origin of installed distributions,
591,Adding a final qualifier to typing,
587,Python Initialization Configuration,
586,Literal Types,
585,Type Hinting Generics In Standard Collections,
584,Add Union Operators To dict,
574,Pickle protocol 5 with out-of-band data,
567,Context Variables,
573,Module State Access from C Extension Methods,
566,Metadata for Python Software Packages 2.1,
570,Python Positional-Only Parameters,
565,Show DeprecationWarning in __main__,
564,Add new time functions with nanosecond resolution,
562,Module __getattr__ and __dir__,
561,Distributing and Packaging Type Information,
560,Core support for typing module and generic types,
557,Data Classes,
553,Built-in breakpoint(),
552,Deterministic pycs,
544,Protocols: Structural subtyping (static duck typing),
572,Assignment Expressions,
540,Add a new UTF-8 Mode,
539,A New C-API for Thread-Local Storage in CPython,
538,Coercing the legacy C locale to a UTF-8 based locale,
530,Asynchronous Comprehensions,
529,Change Windows filesystem encoding to UTF-8,
528,Change Windows console encoding to UTF-8,
527,Removing Un(der)used file types/extensions on PyPI,
524,Make os.urandom() blocking on Linux,
525,Asynchronous Generators,
523,Adding a frame evaluation API to CPython,
520,Preserving Class Attribute Definition Order,
519,Adding a file system path protocol,
518,Specifying Minimum Build System Requirements for Python Projects,
526,Syntax for Variable Annotations,
517,A build-system independent format for source trees,
515,Underscores in Numeric Literals,
508,Dependency specification for Python Software Packages,
506,Adding A Secrets Module To The Standard Library,
503,Simple Repository API,
498,Literal String Interpolation,
495,Local Time Disambiguation,
489,Multi-phase extension module initialization,
492,Coroutines with async and await syntax,
487,Simpler customisation of class creation,
488,Elimination of PYO files,
486,Make the Python Launcher aware of virtual environments,
485,A Function for testing approximate equality,
484,Type Hints,
471,a better and faster directory iterator,
479,Change StopIteration handling inside generators,
477,Backport ensurepip (PEP 453) to Python 2.7,
476,Enabling certificate verification by default for stdlib http clients,
468,Preserving the order of **kwargs in a function.,
475,Retry system calls failing with EINTR,
493,HTTPS verification migration tools for Python 2.7,
466,Network Security Enhancements for Python 2.7.x,
465,A dedicated infix operator for matrix multiplication,
461,Adding % formatting to bytes and bytearray,
454,Add a new tracemalloc module to trace Python memory allocations,
456,Secure and interchangeable hash algorithm,
453,Explicit bootstrapping of pip in Python installations,
451,A ModuleSpec Type for the Import System,
448,Additional Unpacking Generalizations,
446,Make newly created file descriptors non-inheritable,
445,Add new APIs to customize Python memory allocators,
442,Safe object finalization,
443,Single-dispatch generic functions,
441,Improving Python ZIP Application Support,
440,Version Identification and Dependency Specification,
436,The Argument Clinic DSL,
435,Adding an Enum type to the Python standard library,
428,object-oriented filesystem paths,
427,The Wheel Binary Package Format 1.0,
425,Compatibility Tags for Built Distributions,
424,A method for exposing a length hint,
450,Adding A Statistics Module To The Standard Library,
421,Adding sys.implementation,
420,Implicit Namespace Packages,
418,"Add monotonic time, performance counter, and process time functions",
417,Including mock in the Standard Library,
397,Python launcher for Windows,
415,Implement context suppression with exception attributes,
414,Explicit Unicode Literal for Python 3.3,
412,Key-Sharing Dictionary,
405,Python Virtual Environments,
409,Suppressing exception context,
393,Flexible String Representation,
391,Dictionary-Based Configuration For Logging,
389,argparse - New Command Line Parsing Module,
383,Non-decodable Bytes in System Character Interfaces,
384,Defining a Stable ABI,
380,Syntax for Delegating to a Subgenerator,
378,Format Specifier for Thousands Separator,
372,Adding an ordered dictionary to collections,
371,Addition of the multiprocessing package to the standard library,
370,Per user site-packages directory,
366,Main module explicit relative imports,
362,Function Signature Object,
358,The “bytes” Object,
357,Allowing Any Object to be Used for Slicing,
353,Using ssize_t as the index type,
352,Required Superclass for Exceptions,
343,The “with” Statement,
376,Database of Installed Python Distributions,
342,Coroutines via Enhanced Generators,
341,Unifying try-except and try-finally,
338,Executing modules as scripts,
328,Imports: Multi-Line and Absolute/Relative,
331,Locale-Independent Float/String Conversions,
327,Decimal Data Type,
324,subprocess - New process module,
318,Decorators for Functions and Methods,
309,Partial Function Application,
311,Simplified Global Interpreter Lock Acquisition for Extensions,
308,Conditional Expressions,
307,Extensions to the pickle protocol,
305,CSV File API,
302,New Import Hooks,
322,Reverse Iteration,
301,Package Index and Metadata for Distutils,Either “success” or “fail”.
293,Codec Error Handling Callbacks,
292,Simpler String Substitutions,
289,Generator Expressions,
282,A Logging System,
285,Adding a bool type,
279,The enumerate() built-in function,
277,Unicode file name support for Windows NT,
274,Dict Comprehensions,
273,Import Modules from Zip Archives,
264,Future statements in simulated shells,
263,Defining Python Source Code Encodings,
261,Support for “wide” Unicode characters,
260,Simplify xrange(),
255,Simple Generators,
253,Subtyping Built-in Types,
252,Making Types Look More Like Classes,
238,Changing the Division Operator,
250,Using site-packages on Windows,
278,Universal Newline Support,
237,Unifying Long Integers and Integers,
236,Back to the __future__,
235,Import on Case-Insensitive Platforms,
230,Warning Framework,
232,Function Attributes,
234,Iterators,
229,Using Distutils to Build Python,
223,Change the Meaning of ,
221,Import As,
218,Adding a Built-In Set Object Type,
217,Display Hook for Interactive Use,
214,Extended Print Statement,
227,Statically Nested Scopes,
208,Reworking the Coercion Model,
207,Rich Comparisons,
205,Weak References,
203,Augmented Assignments,
202,List Comprehensions,
201,Lockstep Iteration,
100,Python Unicode Integration,
743,Add Py_COMPAT_API_VERSION to the Python C API,
741,Python Configuration C API,
735,Dependency Groups in pyproject.toml,
740,Index support for digital attestations,
739,Static description file for build details of Python installations,
736,Shorthand syntax for keyword arguments at invocation,
733,An Evaluation of Python’s Public C API,
728,TypedDict with Typed Extra Items,
727,Documentation in Annotated Metadata,
725,Specifying external dependencies in pyproject.toml,
720,Cross-compiling Python packages,
718,Subscriptable functions,
712,Adding a “converter” parameter to dataclasses.field,
711,PyBI: a standard format for distributing Python Binaries,
710,Recording the provenance of installed packages,
744,JIT Compilation,
694,Upload 2.0 API for Python Package Repositories,
679,Allow parentheses in assert statements,
671,Syntax for late-bound function argument defaults,
667,Consistent views of namespaces,
661,Sentinel Values,
603,Adding a frozenmap type to collections,
659,Specializing Adaptive Interpreter,
638,Syntactic Macros,
653,Precise Semantics for Pattern Matching,
480,Surviving a Compromise of PyPI: End-to-end signing of packages,
467,Minor API improvements for binary sequences,
588,GitHub Issues Migration Plan,
742,Narrowing types with TypeIs,
723,Inline script metadata,
730,Adding iOS as a supported platform,
738,Adding Android as a supported platform,
703,Making the Global Interpreter Lock Optional in CPython,
714,Rename dist-info-metadata in the Simple API,
705,TypedDict: Read-only items,
702,Marking deprecations using the type system,
701,Syntactic formalization of f-strings,
696,Type Defaults for Type Parameters,
699,Remove private dict version field added in PEP 509,
691,JSON-based Simple API for Python Package Indexes,
687,Isolating modules in the standard library,
686,Make UTF-8 mode default,
685,Comparison of extra names for optional distribution dependencies,
684,A Per-Interpreter GIL,
668,Marking Python base environments as “externally managed”,
683,"Immortal Objects, Using a Fixed Refcount",
658,Serve Distribution Metadata in the Simple Repository API,
649,Deferred Evaluation Of Annotations Using Descriptors,
646,Variadic Generics,
625,Filename of a Source Distribution,
639,Improving License Clarity with Better Package Metadata,
563,Postponed Evaluation of Annotations,
615,Support for the IANA Time Zone Database in the Standard Library,
708,Extending the Repository API to Mitigate Dependency Confusion Attacks,
590,Vectorcall: a fast calling protocol for CPython,
578,Python Runtime Audit Hooks,
458,Secure PyPI downloads with signed repository metadata,
8105,2024 Term Steering Council election,
8103,2022 Term Steering Council election,
8102,2021 Term Steering Council election,
8101,2020 Term Steering Council election,
8100,January 2019 Steering Council election,
8016,The Steering Council Model,
8002,Open Source Governance Survey,
8000,Python Language Governance Proposal Overview,
8104,2023 Term Steering Council election,
719,Python 3.13 Release Schedule,
3333,Python Web Server Gateway Interface v1.0.1,
693,Python 3.12 Release Schedule,
801,Reserved,
672,Unicode-related Security Considerations for Python,
664,Python 3.11 Release Schedule,
619,Python 3.10 Release Schedule,
636,Structural Pattern Matching: Tutorial,
596,Python 3.9 Release Schedule,
630,Isolating Extension Modules,
607,Reducing CPython’s Feature Delivery Latency,
602,Annual Release Cycle for Python,
579,Refactoring C functions and methods,
249,Python Database API Specification v2.0,
257,Docstring Conventions,
248,Python Database API Specification v1.0,
247,API for Cryptographic Hash Functions,
101,Doing Python Releases 101,
20,The Zen of Python,
732,The Python Documentation Editorial Board,
731,C API Working Group Charter,
729,Typing governance process,
676,PEP Infrastructure Process,
609,Python Packaging Authority (PyPA) Governance,
387,Backwards Compatibility Policy,
13,Python Language Governance,
581,Using GitHub Issues for CPython,
12,Sample reStructuredText PEP Template,
8,Style Guide for Python Code,
10,Voting Guidelines,
11,CPython platform support,
7,Style Guide for C Code,
4,Deprecation of Standard Modules,
2,Procedure for Adding New Modules,
635,Structural Pattern Matching: Motivation and Rationale,
